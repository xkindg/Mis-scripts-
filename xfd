--[[
    Copiador Universal de Avatares v3.8 (Prioridad de Pantalones)
    Por Gemini

    CORRECCIONES v3.8:
    - Agregada una regla de prioridad: si un avatar de Brookhaven tiene puestos "Pants" y "Shorts", 
      el script para Catalog ignorará los "Shorts" para evitar conflictos de incompatibilidad.
]]

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local localPlayer = Players.LocalPlayer

--==============================================================================
-- LÓGICA DE GENERACIÓN DE CÓDIGOS
--==============================================================================

function generateBrookhavenScript(description)
    -- (Esta función ya funciona perfecto, no se toca)
    local scriptParts = {'-- Script para Brookhaven'}
    table.insert(scriptParts, 'pcall(function() game:GetService("ReplicatedStorage").Remotes.ResetCharacterAppearance:FireServer() end); wait(0.5)')
    table.insert(scriptParts, 'local function applyOutfit()')
    local wear_ids = {}
    if description.Shirt ~= 0 then table.insert(wear_ids, description.Shirt) end
    if description.Pants ~= 0 then table.insert(wear_ids, description.Pants) end
    if description.GraphicTShirt ~= 0 then table.insert(wear_ids, description.GraphicTShirt) end
    for _, accessory in ipairs(description:GetAccessories(true)) do if accessory.AssetId ~= 0 then table.insert(wear_ids, accessory.AssetId) end end
    if description.WalkAnimation ~= 0 then table.insert(wear_ids, description.WalkAnimation) end
    if description.RunAnimation ~= 0 then table.insert(wear_ids, description.RunAnimation) end
    if description.JumpAnimation ~= 0 then table.insert(wear_ids, description.JumpAnimation) end
    if description.FallAnimation ~= 0 then table.insert(wear_ids, description.FallAnimation) end
    if description.ClimbAnimation ~= 0 then table.insert(wear_ids, description.ClimbAnimation) end
    if description.SwimAnimation ~= 0 then table.insert(wear_ids, description.SwimAnimation) end
    if description.IdleAnimation ~= 0 then table.insert(wear_ids, description.IdleAnimation) end
    for _, assetId in ipairs(wear_ids) do
        table.insert(scriptParts, '    wait(0.1)')
        table.insert(scriptParts, '    local args = {[1] = '..assetId..' }')
        table.insert(scriptParts, '    pcall(function() game:GetService("ReplicatedStorage").Remotes.Wear:InvokeServer(unpack(args)) end)')
    end
    table.insert(scriptParts, '    wait(0.4)')
    table.insert(scriptParts, '    local bodyArgs = {[1]={[1]='..(description.Torso or 0)..',[2]='..(description.RightArm or 0)..',[3]='..(description.LeftArm or 0)..',[4]='..(description.RightLeg or 0)..',[5]='..(description.LeftLeg or 0)..',[6]='..(description.Head or 0)..'}}')
    table.insert(scriptParts, '    pcall(function() game:GetService("ReplicatedStorage").Remotes.ChangeCharacterBody:InvokeServer(unpack(bodyArgs)) end)')
    local headBrickColor = BrickColor.new(description.HeadColor)
    table.insert(scriptParts, '    wait(0.4)')
    table.insert(scriptParts, '    local colorArgs = {[1] = "'..tostring(headBrickColor)..'"}')
    table.insert(scriptParts, '    pcall(function() game:GetService("ReplicatedStorage").Remotes.ChangeBodyColor:FireServer(unpack(colorArgs)) end)')
    table.insert(scriptParts, 'end; applyOutfit()')
    return table.concat(scriptParts, "\n")
end

-- <<<<<<<<<<<<<<< VERSIÓN FINAL DE LA FUNCIÓN PARA CATALOG >>>>>>>>>>>>>>>>>
function generateCatalogScript(description)
    local props = {}
    
    local function formatColor(c3) return string.format('{["b"]=%f,["IsRGBTable"]=true,["g"]=%f,["r"]=%f}', c3.B*255, c3.G*255, c3.R*255) end
    local function formatVector3(v3) return string.format('{["Y"]=%f,["X"]=%f,["Z"]=%f,["Vector3"]=true}', v3.Y, v3.X, v3.Z) end

    -- **NUEVO**: Lógica para dar prioridad a Pantalones sobre Shorts
    local isWearingPants = false
    for _, accessory in ipairs(description:GetAccessories(true)) do
        if accessory.AccessoryType == Enum.AccessoryType.Pants then
            isWearingPants = true
            break
        end
    end

    -- Lógica de Accesorios y Ropa 3D idéntica a la original, con el filtro nuevo
    local accessories = {HatAccessory={},FaceAccessory={},HairAccessory={},WaistAccessory={},ShouldersAccessory={},NeckAccessory={},FrontAccessory={},BackAccessory={}}
    local layeredAccessories = {}
    
    for _, accessory in ipairs(description:GetAccessories(true)) do
        -- **NUEVO**: Si estamos usando pantalones, ignorar los shorts
        if isWearingPants and accessory.AccessoryType == Enum.AccessoryType.Shorts then
            continue -- Saltar este accesorio y seguir con el siguiente
        end

        local typeName = accessory.AccessoryType.Name .. "Accessory"
        if accessories[typeName] then
            table.insert(accessories[typeName], tostring(accessory.AssetId))
        end
        
        if accessory.Order and accessory.Order ~= 0 then
             table.insert(layeredAccessories, string.format('{["Rotation"]=%s,["AssetId"]=%d,["AccessoryType"]="%s",["Position"]=%s,["Order"]=%d,["IsLayered"]=true,["Puffiness"]=%f,["Scale"]=%s}', formatVector3(accessory.Rotation), accessory.AssetId, accessory.AccessoryType.Name, formatVector3(accessory.Position), accessory.Order, accessory.Puffiness or 0, formatVector3(accessory.Scale)))
        end
    end
    
    -- El resto de las propiedades...
    table.insert(props, string.format('["WalkAnimation"] = %d', description.WalkAnimation or 0))
    table.insert(props, string.format('["MoodAnimation"] = %d', description.MoodAnimation or 0))
    table.insert(props, string.format('["ClimbAnimation"] = %d', description.ClimbAnimation or 0))
    table.insert(props, string.format('["FallAnimation"] = %d', description.FallAnimation or 0))
    table.insert(props, string.format('["RunAnimation"] = %d', description.RunAnimation or 0))
    table.insert(props, string.format('["SwimAnimation"] = %d', description.SwimAnimation or 0))
    table.insert(props, string.format('["IdleAnimation"] = %d', description.IdleAnimation or 0))
    table.insert(props, string.format('["JumpAnimation"] = %d', description.JumpAnimation or 0))
    table.insert(props, string.format('["Face"] = %d', description.Face or 0))
    table.insert(props, string.format('["Shirt"] = %d', description.Shirt or 0))
    table.insert(props, string.format('["Pants"] = %d', description.Pants or 0))
    table.insert(props, string.format('["GraphicTShirt"] = %d', description.GraphicTShirt or 0))
    table.insert(props, string.format('["Head"] = %d', description.Head or 0))
    table.insert(props, string.format('["Torso"] = %d', description.Torso or 0))
    table.insert(props, string.format('["LeftArm"] = %d', description.LeftArm or 0))
    table.insert(props, string.format('["RightArm"] = %d', description.RightArm or 0))
    table.insert(props, string.format('["LeftLeg"] = %d', description.LeftLeg or 0))
    table.insert(props, string.format('["RightLeg"] = %d', description.RightLeg or 0))
    table.insert(props, string.format('["ProportionScale"] = %f', description.ProportionScale))
    table.insert(props, string.format('["DepthScale"] = %f', description.DepthScale))
    table.insert(props, string.format('["HeightScale"] = %f', description.HeightScale))
    table.insert(props, string.format('["WidthScale"] = %f', description.WidthScale))
    table.insert(props, string.format('["BodyTypeScale"] = %f', description.BodyTypeScale))
    table.insert(props, string.format('["HeadScale"] = %f', description.HeadScale))
    table.insert(props, string.format('["HeadColor"] = %s', formatColor(description.HeadColor)))
    table.insert(props, string.format('["TorsoColor"] = %s', formatColor(description.TorsoColor)))
    table.insert(props, string.format('["LeftArmColor"] = %s', formatColor(description.LeftArmColor)))
    table.insert(props, string.format('["RightArmColor"] = %s', formatColor(description.RightArmColor)))
    table.insert(props, string.format('["LeftLegColor"] = %s', formatColor(description.LeftLegColor)))
    table.insert(props, string.format('["RightLegColor"] = %s', formatColor(description.RightLegColor)))
    for typeName, idTable in pairs(accessories) do if #idTable > 0 then table.insert(props, string.format('["%s"] = "%s"', typeName, table.concat(idTable, ","))) end end
    
    if #layeredAccessories > 0 then
        table.insert(props, '["LayeredAccessories"] = {' .. table.concat(layeredAccessories, ",") .. '}')
    end
    table.insert(props, '["AccessoryRefinements"] = {}')

    -- Comandos finales
    local targetRigType = 1 -- 1 es el valor para R15
    local rigCheckCmd = string.format([[local lP=game:GetService("Players").LocalPlayer;local h=lP.Character and lP.Character:FindFirstChildOfClass("Humanoid");if h and h.RigType.Value~=%d then game:GetService("ReplicatedStorage").CatalogGuiRemote:InvokeServer({["Action"]="ChangeRig",["RigType"]=h.RigType.Value==0 and 1 or 0});wait(1)end]],targetRigType)
    local resetCmd = [[game:GetService("ReplicatedStorage").CatalogGuiRemote:InvokeServer({["Action"]="ResetSomeHumanoidDescriptionProperties",["PropertyNames"]={"ClimbAnimation","FallAnimation","IdleAnimation","JumpAnimation","RunAnimation","SwimAnimation","WalkAnimation","MoodAnimation","Head","LeftArm","LeftLeg","RightArm","RightLeg","Torso","GraphicTShirt","Pants","Shirt","Face","BackAccessory","FaceAccessory","FrontAccessory","HairAccessory","HatAccessory","NeckAccessory","ShouldersAccessory","WaistAccessory"},["ResetLayeredClothing"]=true});wait(0.5)]]
    local applyCmd = string.format('game:GetService("ReplicatedStorage").CatalogGuiRemote:InvokeServer({["Properties"]={%s},["Action"]="CreateAndWearHumanoidDescription",["RigType"]=%d})',table.concat(props,","),targetRigType)
    
    return "-- Script para Catalog Avatar (v3.8)\n\n" .. rigCheckCmd .. "\n" .. resetCmd .. "\n" .. applyCmd
end


--==============================================================================
-- DETECCIÓN DE JUEGO Y CREACIÓN DE GUI
--==============================================================================
local mode = "UNKNOWN"
local buttonText = "Juego no reconocido"
local titleText = "Copiador Universal"
if ReplicatedStorage:FindFirstChild("CatalogGuiRemote") then
    mode = "CATALOG"
    buttonText = "Copiar Avatar para Brookhaven"
    titleText = "Estás en: Catalog Avatar"
elseif ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("Wear") then
    mode = "BROOKHAVEN"
    buttonText = "Copiar Avatar para Catalog"
    titleText = "Estás en: Brookhaven"
end
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "UniversalCopier"
screenGui.ResetOnSpawn = false
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 450, 0, 120)
mainFrame.Position = UDim2.new(0.5, -225, 0.5, -60)
mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
mainFrame.BorderColor3 = Color3.fromRGB(0, 170, 255)
mainFrame.Draggable = true
mainFrame.Active = true
mainFrame.Parent = screenGui
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
title.Text = titleText
title.Font = Enum.Font.GothamBold
title.TextColor3 = Color3.new(1, 1, 1)
title.Parent = mainFrame
local copyButton = Instance.new("TextButton")
copyButton.Size = UDim2.new(1, -20, 1, -50)
copyButton.Position = UDim2.new(0, 10, 0, 40)
copyButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
copyButton.Font = Enum.Font.GothamSemibold
copyButton.Text = buttonText
copyButton.TextColor3 = Color3.new(1, 1, 1)
copyButton.TextScaled = true
copyButton.Parent = mainFrame
if mode == "UNKNOWN" then
    copyButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50)
end
copyButton.MouseButton1Click:Connect(function()
    if mode == "UNKNOWN" then return end
    local character = localPlayer.Character
    if not character or not character:FindFirstChild("Humanoid") then
        StarterGui:SetCore("SendNotification", {Title = "Error", Text = "No se pudo encontrar tu personaje."})
        return
    end
    local description = character.Humanoid:GetAppliedDescription()
    local generatedScript = ""
    if mode == "CATALOG" then
        generatedScript = generateBrookhavenScript(description)
        StarterGui:SetCore("SendNotification", {Title = "¡Copiado!", Text = "Script para Brookhaven copiado al portapapeles."})
    elseif mode == "BROOKHAVEN" then
        generatedScript = generateCatalogScript(description)
        StarterGui:SetCore("SendNotification", {Title = "¡Copiado!", Text = "Script para Catalog Avatar copiado al portapapeles."})
    end
    setclipboard(generatedScript)
    screenGui:Destroy()
end)
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")
